{    // MakeText        /*Copyright 2019 Tomilola AdewaleLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/ //Copyright 2019, Tomilola Adewale All rights reserved.             app.beginUndoGroup("Ma Code");  var startingPoint=[100,100];var myFormat=[];var currentX=startingPoint[0];var currentY=startingPoint[1];var columnWidth=900;var leading=60;var trackingWidth=5;var wordSpaceWidth=50;var tabWidth= wordSpaceWidth*2;var dict= {"a": [0,],"b": [1,],"c": [2,],"d": [3,],"e": [4,],"f": [5,],"g": [6,],"h": [7,],"i": [8,],"j": [9,],"k": [10,],"l": [11,],"m": [12,],"n": [13,],"o": [14,],"p": [15,],"q": [16,],"r": [17,],"s": [18,],"t": [19,],"u": [20,],"v": [21,],"w": [22,],"x": [23,],"y": [24,],"z": [25,]}; var myComp = app.project.activeItem; var selectedLayers = myComp.selectedLayers;var myOpts="abcdefghijklmnopqrstuvwxyz";myOpts=myOpts.split("");//fill dictionary with Widthsfor (m = 0; m<selectedLayers.length; m++)  {	var whatToAdd =parseInt(selectedLayers[m].name.split(",")[0]);    //alert(whatToAdd);	dict[myOpts[m].toString()][1]= whatToAdd;    }function processRecon(myLineLength2,theWord2){       var myIndiChara2=theWord2.split("");                        for (cc = 0; cc<myIndiChara2.length; cc++)                  {                                                  try {                                    myLineLength2 += parseInt(dict[(myIndiChara2[cc].toString().toLowerCase())][1]) +trackingWidth;                            }                            catch(error) {                                                                if (myIndiChara2[cc].toString().toLowerCase()=="*")                                {                                    myLineLength2 += tabWidth;                                    }                                else if (myIndiChara2[cc].toString().toLowerCase()=="$")                                        {                                            myLineLength2+=tabWidth;                                            }                                   else                                        {                                            }                                                                                //                            }                    }                                    return myLineLength2;        }function processCode(currentX,currentY,theWord){var currentXX=currentX;var currentYY=currentY;       var myIndiChara=theWord.split("");                        for (bb = 0; bb<myIndiChara.length; bb++)                  {                            try {                                                                var myActualWidth=parseInt(dict[(myIndiChara[bb].toString().toLowerCase())][1])+trackingWidth;                                var addThisOne=selectedLayers[parseInt(dict[(myIndiChara[bb].toString().toLowerCase())][0])].duplicate();                                addThisOne.property("position").setValue([currentXX,currentYY]);                                addThisOne.name=myIndiChara[bb].toString();                                addThisOne.label=12;                                addThisOne.moveToEnd();              // var newTextt= myComp.layers.addText(currentPosition.toString())              // newTextt.property("position").setValue(currentPosition);             //  newTextt.moveToEnd();              //alert(currentPosition);                                //alter currentPosition                                //currentPosition=[currentPosition[0]+ myActualWidth+trackingWidth, currentPosition[1]];                                currentXX+=myActualWidth+trackingWidth;                            }                            catch(error) {                                        if (myIndiChara[bb].toString().toLowerCase()=="*")                                        {                                            currentXX+=tabWidth;                                            }                                                                                else if (myIndiChara[bb].toString().toLowerCase()=="$")                                        {                                            currentXX= startingPoint[0];                                            currentXX+=tabWidth;                                            currentYY+= (leading*2);                                            }                                                                                else{                                            }                                                                                                                                                    }                    }                return [currentXX,currentYY];                                }var myString="*The God who made the world and everything in it is the Lord of heaven and earth and does not live in temples built by human hands. And he is not served by human hands, as if he needed anything.$Rather, he himself gives everyone life and breath and everything else.$From one man he made all the nations, that they should inhabit the whole earth; and he marked out their appointed times in history and the boundaries of their lands.$God did this so that they would seek him and perhaps reach out for him and find him, though he is not far from any one of us.";var myLineLength = startingPoint[0];var myWords=myString.split(" ");for (aa = 0; aa<myWords.length; aa++)  {                    //find Line length for each word added on                  myLineLength= processRecon(myLineLength,myWords[aa]);                  var myFigures=[];                                    //alert("gotem");                                      if (myLineLength<= columnWidth)                    {                        //currentPosition stays the same                        myFigures= processCode(currentX,currentY,myWords[aa])                        currentX = myFigures[0];                        myLineLength+= wordSpaceWidth;                    }                    else                    {                        //currentPosition changes                    myLineLength= startingPoint[0];                    currentX= startingPoint[0],                    currentY+=leading;                    myFigures= processCode(currentX,currentY,myWords[aa])                    currentX=myFigures[0];                    currentY=myFigures[1];                                            }                                                //add space between words               //var newTextt= myComp.layers.addText(currentPosition.toString())               //newTextt.property("position").setValue(currentPosition);              // newTextt.moveToEnd();              //alert(currentPosition);                currentX+= wordSpaceWidth;                currentY=myFigures[1];                                         }  app.endUndoGroup();    }